import os
import time
import logging
import pandas as pd
from concurrent.futures import ThreadPoolExecutor, as_completed
import ssl
import certifi
ssl._create_default_https_context = lambda: ssl.create_default_context(cafile=certifi.where())
from Bio.Blast import NCBIWWW, NCBIXML

#  –ü–£–¢–ò: –í–°–ï –§–ê–ô–õ–´ –•–†–ê–ù–Ø–¢–°–Ø –í /Users/annaklimova/Git/Rosalind/BLAST
base_path = "/Users/annaklimova/Git/Rosalind/BLAST"
blast_results_path = os.path.join(base_path, "blast_results")
blast_queries_path = os.path.join(base_path, "blast_queries")
file_path = os.path.join(base_path, "output_table.csv")
log_path = os.path.join(base_path, "blast_errors.log")

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏
os.makedirs(blast_results_path, exist_ok=True)
os.makedirs(blast_queries_path, exist_ok=True)

#  –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename=log_path, level=logging.ERROR, format="%(asctime)s - %(message)s")

#  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å NCBI
import urllib.request

def check_ncbi():
    try:
        urllib.request.urlopen("https://blast.ncbi.nlm.nih.gov/Blast.cgi", timeout=5)
        return True
    except Exception:
        return False

if not check_ncbi():
    print(" NCBI BLAST –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ VPN.")
    exit(1)

#  –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = pd.read_csv(file_path) if file_path.endswith(".csv") else pd.read_excel(file_path, engine="openpyxl")
df = df.dropna(subset=["oligo_sequence"]).reset_index(drop=True)  # –£–±–∏—Ä–∞–µ–º NaN
sequences = df["oligo_sequence"].iloc[39:60]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 15 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π

#  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –º–†–ù–ö
def get_mRNA(sequence):
    complement = {"A": "U", "T": "A", "C": "G", "G": "C",
                  "a": "u", "t": "a", "c": "g", "g": "c"}
    return "".join(complement.get(nuc.upper(), "") for nuc in sequence)[::-1]  # –†–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º

#  –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ FASTA-—Ñ–∞–π–ª
def save_fasta(sequence, index):
    fasta_file = os.path.join(blast_queries_path, f"query_{index}.fasta")
    with open(fasta_file, "w") as f:
        f.write(f">query_{index}\n{sequence}\n")
    return fasta_file

#  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ NCBI BLAST –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
def run_remote_blast(sequence, index, max_retries=3):
    blast_file = os.path.join(blast_results_path, f"blast_result_{index}.xml")
    fasta_file = save_fasta(sequence, index)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º FASTA-–∑–∞–ø—Ä–æ—Å

    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –µ—Å—Ç—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if os.path.exists(blast_file):
        return parse_blast_results(blast_file, index)

    attempt = 0
    while attempt < max_retries:
        try:
            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {index} –Ω–∞ NCBI BLAST...")
            result_handle = NCBIWWW.qblast("blastn", "nt", sequence,
                                           hitlist_size=1,
                                           expect=0.05,
                                           format_type="XML",
                                           entrez_query="mus.anna.study@gmail.com")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ XML-—Ñ–∞–π–ª
            with open(blast_file, "w") as out_file:
                out_file.write(result_handle.read())

            return parse_blast_results(blast_file, index)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ BLAST {index}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {index}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}")
            time.sleep(3)  # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            attempt += 1

    return [index, "ERROR", "ERROR", "ERROR"]

#  –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã BLAST
def parse_blast_results(blast_file, index):
    if not os.path.exists(blast_file):
        return [index, "NA", "NA", "NA"]

    try:
        with open(blast_file) as result_handle:
            blast_record = NCBIXML.read(result_handle)

        if not blast_record.alignments:
            return [index, "NA", "NA", "NA"]

        top_hit = blast_record.alignments[0]
        hsp = top_hit.hsps[0]

        return [index, top_hit.title, hsp.identities / hsp.align_length, hsp.expect]

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML {index}: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML {index}: {e}")
        return [index, "ERROR", "ERROR", "ERROR"]

# Ô∏è –ó–∞–ø—É—Å–∫ BLAST –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (–¥–æ 2 –ø–æ—Ç–æ–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏)
num_threads = min(2, len(sequences))
results = []
with ThreadPoolExecutor(max_workers=num_threads) as executor:
    future_to_index = {executor.submit(run_remote_blast, get_mRNA(seq.strip()), i): i for i, seq in enumerate(sequences)}
    for future in as_completed(future_to_index):
        try:
            results.append(future.result())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞: {e}")

#  –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ DataFrame
for res in results:
    index, top1_hit, top1_real, top1_predicted = res
    df.at[index, "top1_hit"] = top1_hit
    df.at[index, "top1_real"] = top1_real
    df.at[index, "top1_predicted"] = top1_predicted

#  –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
df.to_csv(file_path, index=False, na_rep="NA")
print(f"\n‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ BLAST: {file_path}")
